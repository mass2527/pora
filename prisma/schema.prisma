// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id String @id @default(uuid())

  blogs Blog[]

  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  jobPosition   String?
  accounts      Account[]
  sessions      Session[]
}

model Blog {
  id   String @id @default(uuid())
  slug String @unique
  name String

  articles Article[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  categories Category[]

  @@index([userId])
}

model Article {
  id          String  @id @default(uuid())
  slug        String
  title       String
  description String?

  jsonContent String
  htmlContent String

  // writing | published | hidden
  status String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId String

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  // slug should be unique if same blog
  @@unique([blogId, slug])
  @@index([categoryId])
}

model Category {
  id   String @id @default(uuid())
  name String
  slug String

  articles Article[]

  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId String

  // name and slug should be unique if same blog
  @@unique([blogId, name])
  @@unique([blogId, slug])
}
